--- origsrc/classpath-0.93/configure.ac	2006-12-08 13:22:50.000000000 -0600
+++ src/classpath-0.93/configure.ac	2007-03-13 22:26:53.125000000 -0500
@@ -25,6 +25,9 @@
      darwin*)
 	cp_module=""
 	;;
+	cygwin*)
+	cp_module="-module -avoid-version"
+	;;
 	*)
 	cp_module="-module"
 	;;
--- origsrc/classpath-0.93/examples/Makefile.java2d.in	2006-07-10 14:45:24.000000000 -0500
+++ src/classpath-0.93/examples/Makefile.java2d.in	2007-03-16 14:54:00.437500000 -0500
@@ -10,8 +10,8 @@
 GTK_LIBS = @GTK_LIBS@
 
 all: $(srcdir)/gnu/classpath/examples/java2d/bench.c $(srcdir)/gnu/classpath/examples/java2d/bench.h
-	gcc -g -O0 -Wall -I$(srcdir)/gnu/classpath/examples/java2d $(GTK_CFLAGS) -L$(GTK_LIBS) \
-	-o cairobench $(srcdir)/gnu/classpath/examples/java2d/bench.c
+	gcc -g -O0 -Wall -I$(srcdir)/gnu/classpath/examples/java2d $(GTK_CFLAGS) \
+	-o cairobench $(srcdir)/gnu/classpath/examples/java2d/bench.c $(GTK_LIBS)
 
 clean:
 	rm -f gnu/classpath/examples/java2d/bench
--- origsrc/classpath-0.93/gnu/java/awt/peer/x/XLightweightPeer.java	2006-06-29 10:15:56.000000000 -0500
+++ src/classpath-0.93/gnu/java/awt/peer/x/XLightweightPeer.java	2007-03-14 23:15:00.546875000 -0500
@@ -38,7 +38,7 @@
 
 package gnu.java.awt.peer.x;
 
-import java.awt.Component;
+import java.awt.Container;
 import java.awt.peer.LightweightPeer;
 
 import gnu.java.awt.peer.swing.SwingContainerPeer;
@@ -48,7 +48,7 @@
   implements LightweightPeer
 {
 
-  XLightweightPeer(Component c)
+  XLightweightPeer(Container c)
   {
     super(c);
     init(c, null);
--- origsrc/classpath-0.93/gnu/java/awt/peer/x/XToolkit.java	2006-07-20 08:08:07.000000000 -0500
+++ src/classpath-0.93/gnu/java/awt/peer/x/XToolkit.java	2007-03-14 23:18:19.000000000 -0500
@@ -44,7 +44,7 @@
 import java.awt.Checkbox;
 import java.awt.CheckboxMenuItem;
 import java.awt.Choice;
-import java.awt.Component;
+import java.awt.Container;
 import java.awt.Dialog;
 import java.awt.Dimension;
 import java.awt.EventQueue;
@@ -601,7 +601,7 @@
     return (XGraphicsDevice) env.getDefaultScreenDevice();
   }
 
-  protected LightweightPeer createComponent(Component c)
+  protected LightweightPeer createComponent(Container c)
   {
     return new XLightweightPeer(c);
   }
--- origsrc/classpath-0.93/m4/acinclude.m4	2006-06-14 07:35:17.000000000 -0500
+++ src/classpath-0.93/m4/acinclude.m4	2007-03-14 23:04:20.265625000 -0500
@@ -404,7 +404,7 @@
   [
     if test -d "${withval}"; then
       JAY_DIR_PATH="${withval}"
-      AC_PATH_PROG(JAY, jay, "no", ${JAY_DIR_PATH})
+      AC_PATH_PROG(JAY, jay, "no")
       if test "x${JAY}" = xno; then
         AC_MSG_ERROR("jay executable not found");
       fi
--- origsrc/classpath-0.93/native/jni/java-net/gnu_java_net_VMPlainSocketImpl.c	2006-11-26 07:31:27.000000000 -0600
+++ src/classpath-0.93/native/jni/java-net/gnu_java_net_VMPlainSocketImpl.c	2007-02-18 22:21:39.859375000 -0600
@@ -110,6 +110,7 @@
 }
 
 
+#ifdef AF_INET6
 /*
  * Class:     gnu_java_net_VMPlainSocketImpl
  * Method:    bind6
@@ -142,6 +143,7 @@
   if (-1 == ret)
     JCL_ThrowException (env, IO_EXCEPTION, strerror (errno));
 }
+#endif
 
 
 /*
--- origsrc/classpath-0.93/native/jni/java-net/java_net_VMInetAddress.c	2006-09-08 03:59:57.000000000 -0500
+++ src/classpath-0.93/native/jni/java-net/java_net_VMInetAddress.c	2007-02-18 22:25:30.125000000 -0600
@@ -163,10 +163,12 @@
       addr = cpnet_newIPV4Address(env);
       cpnet_bytesToIPV4Address (addr, octets);      
       break;
+#ifdef AF_INET6
     case 16:
       addr = cpnet_newIPV6Address(env);
       cpnet_bytesToIPV6Address (addr, octets);
       break;
+#endif
     default:
       JCL_ThrowException (env, UNKNOWN_HOST_EXCEPTION, "Bad IP Address");
       return (jstring) NULL;
@@ -245,6 +247,7 @@
   /* Now loop and copy in each address */
   for (i = 0; i < addresses_count; i++)
     {
+#ifdef AF_INET6
       if (cpnet_isIPV6Address (addresses[i]))
 	{
 	  ret_octets = (*env)->NewByteArray (env, 16);
@@ -265,6 +268,9 @@
 	  (*env)->SetObjectArrayElement (env, addrs, i, ret_octets);
 	}
       else if (cpnet_isIPV4Address (addresses[i]))
+#else
+      if (cpnet_isIPV4Address (addresses[i]))
+#endif
 	{
 	  ret_octets = (*env)->NewByteArray (env, 4);
 
@@ -336,6 +342,7 @@
   if (!address)
     return (jbyteArray) NULL;
 
+#ifdef AF_INET6
   if (cpnet_isIPV6Address (address))
     {
       ret_octets = (jbyteArray) (*env)->NewByteArray (env, 16);
@@ -354,6 +361,9 @@
       (*env)->ReleaseByteArrayElements (env, ret_octets, octets, 0);
     }
   else if (cpnet_isIPV4Address (address))
+#else
+  if (cpnet_isIPV4Address (address))
+#endif
     {
       ret_octets = (jbyteArray) (*env)->NewByteArray (env, 4);
 
--- origsrc/classpath-0.93/native/jni/java-net/javanet.c	2006-10-24 19:39:02.000000000 -0500
+++ src/classpath-0.93/native/jni/java-net/javanet.c	2007-02-18 22:26:10.078125000 -0600
@@ -395,10 +395,12 @@
       netaddr = cpnet_newIPV4Address(env);
       cpnet_bytesToIPV4Address(netaddr, octets);
       break;
+#ifdef AF_INET6
     case 16:
       netaddr = cpnet_newIPV6Address(env);
       cpnet_bytesToIPV6Address(netaddr, octets);
       break;
+#endif
     default:
       /* This should not happen as we have checked before.
        * But that way we shut the compiler warnings */
--- origsrc/classpath-0.93/native/jni/java-nio/gnu_java_nio_VMChannel.c	2006-12-04 16:17:03.000000000 -0600
+++ src/classpath-0.93/native/jni/java-nio/gnu_java_nio_VMChannel.c	2007-02-18 22:35:47.468750000 -0600
@@ -67,6 +67,10 @@
 #include <fcntl.h>
 #endif /* HAVE_FCNTL_H */
 
+#ifndef MSG_WAITALL
+#define MSG_WAITALL 0x0
+#endif
+
 #define CONNECT_EXCEPTION "java/net/ConnectException"
 #define IO_EXCEPTION "java/io/IOException"
 #define SOCKET_EXCEPTION "java/net/SocketException"
--- origsrc/classpath-0.93/native/jni/native-lib/cpio.c	2006-10-24 19:33:26.000000000 -0500
+++ src/classpath-0.93/native/jni/native-lib/cpio.c	2007-02-18 22:16:48.937500000 -0600
@@ -50,6 +50,10 @@
 #if defined(HAVE_SYS_IOCTL_H)
 #define BSD_COMP /* Get FIONREAD on Solaris2 */
 #include <sys/ioctl.h>
+#if defined(__CYGWIN__)
+#include <sys/termios.h>
+#define FIONREAD TIOCINQ
+#endif
 #endif
 #if defined(HAVE_SYS_FILIO_H) /* Get FIONREAD on Solaris 2.5 */
 #include <sys/filio.h>
--- origsrc/classpath-0.93/native/jni/native-lib/cpnet.c	2006-09-17 02:31:43.000000000 -0500
+++ src/classpath-0.93/native/jni/native-lib/cpnet.c	2007-02-18 22:08:36.656250000 -0600
@@ -650,6 +650,7 @@
 	  cpnet_bytesToIPV4Address(addr_arr[i], (jbyte *)hret.h_addr_list[i]);
 	}
       break;
+#ifdef AF_INET6
     case AF_INET6:
       for (i = 0; i < counter; i++)
 	{
@@ -657,6 +658,7 @@
 	  cpnet_bytesToIPV6Address(addr_arr[i], (jbyte *)hret.h_addr_list[i]);
 	}
       break;
+#endif
     default:
       *addresses_count = 0;
       JCL_free(env, addr_arr);
@@ -689,12 +691,14 @@
       addr_len = sizeof(haddr.addr_v4->sin_addr);
       addr_type = AF_INET;
     }
+#ifdef AF_INET6
   else if (haddr.addr_v6->sin6_family == AF_INET6)
     {
       raw_addr = &haddr.addr_v6->sin6_addr;
       addr_type = AF_INET6;
       addr_len = sizeof(haddr.addr_v6->sin6_addr);
     }
+#endif
   else
     return EINVAL;
 
@@ -719,7 +723,7 @@
 jint cpnet_aton (JNIEnv *env, const char *hostname, cpnet_address **addr)
 {
   jbyte *bytes = NULL;
-#ifdef HAVE_INET_PTON
+#ifdef AF_INET6
   jbyte inet6_addr[16];
 #endif
 
@@ -746,7 +750,7 @@
       return 0;
     }
 
-#ifdef HAVE_INET_PTON
+#ifdef AF_INET6
   if (inet_pton (AF_INET6, hostname, inet6_addr) > 0)
     {
       *addr = cpnet_newIPV6Address(env);
--- origsrc/classpath-0.93/native/jni/native-lib/cpnet.h	2006-09-08 03:59:57.000000000 -0500
+++ src/classpath-0.93/native/jni/native-lib/cpnet.h	2007-02-18 22:11:46.328125000 -0600
@@ -115,6 +115,7 @@
   netaddr->sin_addr.s_addr = INADDR_ANY;
 }
 
+#ifdef AF_INET6
 static inline cpnet_address *cpnet_newIPV6Address(JNIEnv * env)
 {
   cpnet_address * addr = (cpnet_address *)JCL_malloc(env, sizeof(cpnet_address) + sizeof(struct sockaddr_in6));
@@ -126,6 +127,7 @@
 
   return addr;
 }
+#endif
 
 static inline void cpnet_freeAddress(JNIEnv * env, cpnet_address *addr)
 {
@@ -154,12 +156,14 @@
   return memcmp(addr1->data, addr2->data, addr1->len) == 0;
 }
 
+#ifdef AF_INET6
 static inline jboolean cpnet_isIPV6Address(cpnet_address *addr)
 {
   struct sockaddr_in *ipaddr = (struct sockaddr_in *)&(addr->data[0]);
 
   return ipaddr->sin_family == AF_INET6;
 }
+#endif
 
 static inline jboolean cpnet_isIPV4Address(cpnet_address *addr)
 {
@@ -192,6 +196,7 @@
   ipaddr->sin_addr.s_addr = htonl(sysaddr);
 }
 
+#ifdef AF_INET6
 static inline void cpnet_IPV6AddressToBytes(cpnet_address *netaddr, jbyte *octets)
 {
   struct sockaddr_in6 *ipaddr = (struct sockaddr_in6 *)&(netaddr->data[0]);
@@ -205,5 +210,6 @@
 
   memcpy(&ipaddr->sin6_addr, octets, 16);
 }
+#endif
 
 #endif
